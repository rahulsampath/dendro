Installation Instructions
=========================
DENDRO v1.0
--------

DENDRO requires that PETSc be installed on the system. Because of frequent changes
to the PETSc interface, we require that PETSc version 3.0.0 be installed. It
should be possible to make DENDRO work with older/newer versions of PETSc with minor
changes to the code. 

The PETSc developers provide access to all
versions of PETSc; see:
http://www-unix.mcs.anl.gov/petsc/petsc-as/download/index.html

Install PETSc (version 3.0.0) with the option '-with-clanguage=cxx'.  This will
build the PETSc library using a 'C++' compiler. After downloading
PETSc, use "gunzip -c petsc-3.0.0.tar.gz | tar xf -" and open the
docs/index.html file to find the PETSc installation instruction for
petsc-3.0.0. Make sure that the environment variables PETSC_DIR and PETSC_ARCH point to
the correct PETSc installation. You can do this by typing the following command
at the command line.

echo $PETSC_DIR; echo $PETSC_ARCH

The first line of the output should be set to the directory in which
you installed PETSc and the second line must be the value of
PETSC_ARCH that you set while compiling PETSc.

Set the environment variable DENDRO_DIR to point to the top level
directory where you want to install DENDRO. Go to the Dendro directory
and  use
export DENDRO_DIR=$PWD 
for a bash shell environment.

Type 'make' to build the library and the example programs. 
Go to the 'bin' directory and run the examples. For example,
'newElasSolver' uses the multigrid solver for the constant 
coefficient linear elasticity problem with homogeneous
dirichlet boundary conditions. You must copy the '*.inp' files 
from the 'Stencils' folder into the directory containing the executable
before running any program that uses the 'omg' module, i.e.
multigrid solver. 

If you want to trying out any of the examples that read a point dataset 
from a file, you can copy sample point datasets from the 'data' folder into
the directory containing the executable. You must first split the '*.pts'
files into multiple files (1 for each processor) and the programs expect
the sequence of files to be named as follows:
<prefix><Rank>_<Number of Processors>.pts
The program scripts/splitPoints.C can be used to split the '*.pts' as
described above. The '*.pts' files are binary files. 

Some examples read '*.ot' files for input. These files store the anchors and
levels of each octant in an octree in ASCII format. 

Read the file EXAMPLES_DOC for more information about the examples.

You can provide additional optimization flags to the compiler by
setting the flag 'CFLAGS' in the makefile. If you pass the options
'__USE_MG_INIT_TYPE2__' or '__USE_MG_INIT_TYPE3__' to 'CFLAGS',
then you must also copy the scripts 'scripts/copyInpType2.sh' or
'scripts/copyInpType3.sh', respectively into the directory
containing the executable before running any program that uses
the 'omg' module. Check that the '*.inp' files are
already present in the same directory first. 

The functions in the library are profiled using PETSc. To profile the
major functions in the library, pass the flag '-DPETSC_USE_LOG' to the
compiler in the variable 'CFLAGS' in the makefile, while building the
library.  You can then view the log summary by passing the option
'-log_summary' to your executable.

Please refer to the Manual and 'Doxygen' documentation for more
information.








